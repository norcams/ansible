# This will try to upgrade nova without downtime
#
# Example:
# ansible-playbook -e location=test01 lib/upgrade/nova.yaml
#
# Vagrant example:
# ansible-playbook -K -e location=vagrant lib/upgrade/nova.yaml
#
# In vagrant also run this first:
# vagrant rsync identity
# sudo -v (once every sudo-timeout to avoid 'sudo: a password is required')
#
# Variables:
#   location: name of location (mandatory)
#
# Last verified: 2020-08-18 (ansible version 2.9.10)
#

# Stop puppet on all novactrl nodes
- import_playbook: ../toggle_puppet.yaml
  vars:
    myhosts:  "{{ location }}-novactrl"
    action:   disable
  when: location != 'vagrant'

# Upgrade novactrl-0x
- hosts: "{{ location }}-novactrl"
  gather_facts: false
  tasks:
    - systemd: name=crond state=stopped
    - name: 'Repo files'
      command: 'ls -1 /etc/yum.repos.d/'
      register: repo_files

    - name: 'Remove all old yum repos'
      file: name="/etc/yum.repos.d/{{item}}" state=absent
      with_items: "{{repo_files.stdout_lines | default([])}}"

    - import_tasks: ../tasks/puppetrun.yaml
      vars:
        runmode: 'kickstart'
      ignore_errors: yes

    - name: 'Stop httpd for nova API service'
      systemd: name=httpd state=stopped
      ignore_errors: yes

    - name: 'Stop nova scheduler service'
      systemd: name=openstack-nova-scheduler state=stopped
      ignore_errors: yes

    - name: 'Stop nova conductor service'
      systemd: name=openstack-nova-conductor state=stopped
      ignore_errors: yes

    - name: Purge old package
      yum: name=*nova* state=absent

    - name: Purge old package
      yum: name=*placement* state=absent

    - name: 'Remove /etc/nova/'
      file: name=/etc/nova state=absent

    - name: 'Remove /etc/placement/'
      file: name=/etc/placement state=absent

    - name: 'Clear problematic packages'
      package:
        name:
        - openvswitch
        - network-scripts-openvswitch
        - rdo-network-scripts-openvswitch
        state: absent

    - name: 'Yum update'
      yum: name=* state=latest update_cache=yes

    - import_tasks: ../tasks/puppetrun.yaml

    - name: "db sync"
      command: "nova-manage db sync"
      run_once: true

    - name: "db cell_v2 simple_cell_setup"
      command: "nova-manage cell_v2 simple_cell_setup"
      run_once: true
      #ignore_errors: yes

    - name: "api db sync"
      command: "nova-manage api_db sync"
      run_once: true

    - name: "db online_data_migrations"
      command: "nova-manage db online_data_migrations"
      run_once: true

    - import_tasks: ../tasks/puppetrun.yaml

# Upgrade compute-0x
- hosts: "{{ location }}-compute"
  become: true
  gather_facts: yes
  tasks:
    - systemd: name=crond state=stopped
    - name: Get http_proxy ip for {{location}}
      local_action: shell getent hosts {{ location }}-proxy-01 | awk '{ print $1 }'
      register: proxy_ip

    - name: 'Check distribution version'
      debug: msg={{ ansible_distribution }}

    - name: 'Repo files'
      command: 'ls -1 /etc/yum.repos.d/'
      register: repo_files
      when: ansible_facts['distribution'] == "AlmaLinux"

    - name: 'Remove all old yum repos'
      file: name="/etc/yum.repos.d/{{item}}" state=absent
      with_items: "{{repo_files.stdout_lines | default([])}}"
      when: ansible_facts['distribution'] == "AlmaLinux"

    - name: 'Stop openstack-nova-compute'
      systemd: name=openstack-nova-compute state=stopped
      ignore_errors: yes
      when: ansible_facts['distribution'] == "AlmaLinux"

    - name: 'Stop openstack-nova-metadata-api'
      systemd: name=openstack-nova-metadata-api state=stopped
      ignore_errors: yes
      when: ansible_facts['distribution'] == "AlmaLinux"

    - import_tasks: ../tasks/puppetrun.yaml
      vars:
        runmode: 'kickstart'
        http_proxy: "{{proxy_ip}}:8888"
      when: ansible_facts['distribution'] == "AlmaLinux"

    # Do not do yum update on compute
#    - name: 'Yum update'
#      yum: name=* state=latest update_cache=yes

    - name: Purge old openstack-nova-common
      yum: name=openstack-nova-common state=absent
      when: ansible_facts['distribution'] == "AlmaLinux"

    - name: Purge old openstack-nova-api
      yum: name=openstack-nova-api state=absent
      when: ansible_facts['distribution'] == "AlmaLinux"

    - name: 'Remove /etc/nova/'
      file: name=/etc/nova state=absent
      when: ansible_facts['distribution'] == "AlmaLinux"

    - import_tasks: ../tasks/puppetrun.yaml
      vars:
        http_proxy: "{{proxy_ip}}:8888"
      when: ansible_facts['distribution'] == "AlmaLinux"

    - import_tasks: ../tasks/puppetrun.yaml
      vars:
        http_proxy: "{{proxy_ip}}:8888"
      when: ansible_facts['distribution'] == "AlmaLinux"

    - import_tasks: ../tasks/puppetrun.yaml
      vars:
        http_proxy: "{{proxy_ip}}:8888"
      when: ansible_facts['distribution'] == "AlmaLinux"

    # restart services
    - systemd: name=etcd state=restarted
    - pause: seconds=10
    - systemd: name=etcd-grpc-proxy state=restarted
    - pause: seconds=10
    - systemd: name=calico-dhcp-agent state=restarted
    - pause: seconds=10
    - systemd: name=calico-felix state=restarted
    - pause: seconds=10
    - systemd: name=openstack-nova-compute state=restarted
    - pause: seconds=10
    - systemd: name=openstack-nova-metadata-api state=restarted
    - pause: seconds=10

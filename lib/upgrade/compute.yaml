# This will try to upgrade nova without downtime
#
# Example:
# sudo ansible-playbook -e "myhosts=test01-compute-01 himlar_puppet_env=yoga" lib/upgrade/compute.yaml
#
# Variables:
#   myhosts: name of host(s) to upgrade (mandatory)
#
# Last verified: 2020-08-18 (ansible version 2.9.10)
#

# Sanity check: himlar_puppet_env must be defined
- hosts: localhost
  gather_facts: false
  tasks:
    - name: Check if himlar_puppet_env is defined
      ansible.builtin.fail:
        msg: "Variable himlar_puppet_env is not defined"
      when: himlar_puppet_env is not defined

# Stop puppet on all novactrl nodes
- ansible.builtin.import_playbook: ../toggle_puppet.yaml
  vars:
    myhosts:  "{{ myhosts }}"
    action:   disable
  when: location != 'vagrant'

# Upgrade compute host(s)
- hosts: "{{ myhosts }}"
  serial: 1
  gather_facts: true

  vars:
    config_dir: '/etc/nova'
    etcd_services_to_restart:
      - etcd
      - etcd-grpc-proxy
    compute_services_to_restart:
      - openstack-nova-compute
      - calico-felix
      - openstack-nova-metadata-api

  tasks:

    - name: Define auth_url variable (bgo)
      ansible.builtin.set_fact:
        auth_url: 'http://identity.bgo.uhdc.no:5000'
      when: location == 'bgo'

    - name: Define auth_url variable (osl)
      ansible.builtin.set_fact:
        auth_url: 'http://identity.osl.uhdc.no:5000'
      when: location == 'osl'

    - name: Define auth_url variable (test01)
      ansible.builtin.set_fact:
        auth_url: 'http://identity.test01.uhdc.no:5000'
      when: location == 'test01'

    - name: Check if "{{ config_dir }}_pre_{{ himlar_puppet_env }}" exists
      ansible.builtin.stat:
        path: "{{ config_dir }}_pre_{{ himlar_puppet_env }}"
      register: check_config_backup

    - name: "Backup {{ config_dir }} to {{ config_dir }}_pre_{{ himlar_puppet_env }}"
      ansible.builtin.command: "cp -a {{ config_dir }} {{ config_dir }}_pre_{{ himlar_puppet_env }}"
      when: check_config_backup.stat.exists == False

    - name: 'Stop crond to avoid puppet run'
      ansible.builtin.systemd_service:
        name: crond
        state: stopped

    - name: Get hypervisor status
      ansible.builtin.shell: "source /root/openrc ; openstack --os-auth-url {{ auth_url }} hypervisor show {{ ansible_fqdn }} -c status -f value"
      register: initial_host_status

    - name: Disable hypervisor
      ansible.builtin.shell: "source /root/openrc ; openstack --os-auth-url {{ auth_url }} compute service set {{ ansible_fqdn }} nova-compute --disable"
      when: initial_host_status.stdout == "enabled"

    - name: Update release package to get new gpg keys first
      ansible.builtin.dnf:
        name: 'almalinux-release'
        state: latest
        update_cache: yes

    - name: 'Repo files'
      ansible.builtin.command: 'ls -1 /etc/yum.repos.d/'
      register: repo_files

    - name: 'Remove all old yum repos'
      ansible.builtin.file:
        name: "/etc/yum.repos.d/{{item}}"
        state: absent
      with_items: "{{repo_files.stdout_lines | default([])}}"

    - name: 'Stop openstack-nova-compute'
      ansible.builtin.systemd_service:
        name: openstack-nova-compute
        state: stopped
      ignore_errors: yes

    - name: 'Stop nova metadata-api service'
      ansible.builtin.systemd_service:
        name: openstack-nova-metadata-api
        state: stopped
      ignore_errors: yes

    - name: Run Puppet (kickstart)
      ansible.builtin.import_tasks: ../tasks/puppetrun.yaml
      vars:
        runmode: 'kickstart'
        puppet_ignore_errors: no

    - name: 'Purge old package'
      ansible.builtin.dnf:
        name:
          - python3-nova
          - python3-novaclient
          - openstack-nova-api
          - openstack-nova-common
          - openstack-nova-compute
        state: absent

    - name: 'Autoremove unneeded packages installed as dependencies'
      ansible.builtin.dnf:
        autoremove: yes

    - name: "Remove {{ config_dir }}"
      ansible.builtin.file:
        name: "{{ config_dir }}"
        state: absent

    - name: 'Update RDO packages'
      ansible.builtin.dnf:
        name: "*"
        state: latest
        update_cache: true
        disablerepo: "*"
        enablerepo: "rdo-release"

    - name: Run Puppet
      ansible.builtin.import_tasks: ../tasks/puppetrun.yaml
      vars:
        himlar_puppet_env: "{{ himlar_puppet_env }}"
        puppet_ignore_errors: no

    - name: Patch guest.py for NVRAM bug
      ansible.builtin.import_tasks: ../tasks/patch.yaml
      vars:
        patchfile: ../../files/patches/nova-libvirt-rebuild.diff
        dest: /usr/lib/python3.6/site-packages/nova/virt/libvirt/guest.py

    - name: Restart compute services
      ansible.builtin.import_tasks: ../tasks/restart_compute_services.yaml
      vars:
        myhosts:  "{{ ansible_nodename }}"
        services_to_restart: "{{ etcd_services_to_restart + compute_services_to_restart }}"
      when: location != 'vagrant'

    - name: Restart compute services (vagrant)
      ansible.builtin.import_tasks: ../tasks/restart_compute_services.yaml
      vars:
        myhosts:  "{{ myhosts }}"
        services_to_restart: "{{ compute_services_to_restart }}"
      when: location == 'vagrant'

    - name: 'Start crond'
      ansible.builtin.systemd_service:
        name: crond
        state: started

    - name: Enable hypervisor
      ansible.builtin.shell: "source /root/openrc ; openstack --os-auth-url {{ auth_url }} compute service set {{ ansible_fqdn }} nova-compute --enable"
      when: initial_host_status.stdout == "enabled"
